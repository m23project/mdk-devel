#!/bin/sh

#m23-Server Installation Script
#Script zum Installieren des m23-Server
#Ralf Sörensen (RSoerensen@gss-netconcepts.de)
#Hauke Goos-Habermann (HHabermann@pc-kiel.de)





#Checks the fstab for needed entries and adds them, if missing. Then mounts the devices
checkFstabAndMount()
{
	mkdir -p /proc /sys /dev/pts

	if [ `grep -c proc /etc/fstab` -eq 0 ]
	then
		echo "none /proc proc defaults 0 0" >> /etc/fstab
	fi

	if [ `grep -c sysfs /etc/fstab` -eq 0 ]
	then
		echo "none /sys sysfs defaults 0 0" >> /etc/fstab
	fi

	if [ `grep -c devpts /etc/fstab` -eq 0 ]
	then
		echo "none /dev/pts devpts defaults 0 0" >> /etc/fstab
	fi

	sync

	mount /proc 2> /dev/null
	mount /sys 2> /dev/null
	mount /dev/pts 2> /dev/null
}





#checks if the drive has a valid disk label and adds a msdos disklabe if none exists. This is required for partitioning and detecting the size of the drive with parted.
#parameter: $1: device name (e.g. /dev/sda)
checkdisklabel()
{
parted -s $1 print 2> /tmp/checklabeltest
parted -s $1 print >> /tmp/checklabeltest 2> /dev/null
if test `grep unrecognised /tmp/checklabeltest -c` -gt 0
then
	if [ `grep "Warning:" /tmp/checklabeltest -c` -eq 0 ]
	then
		parted -s $1 mklabel msdos 2> /dev/null
	fi
fi
}





#configure the network settings
#parameter: $host: hostname
#parameter: $ip: IP address
#parameter: $network: network address
#parameter: $broadcast: bradcast address
#parameter: $submask: subnet mask
#parameter: $gateway: IP of the gateway server
#parameter: $nameserver: IP of the DNS server
configureNetwork()
{
rm /etc/network/interfaces 2> /dev/null

#removes old stored udev network device(s)
rm /etc/udev/rules.d/*persistent-net.rules 2> /dev/null

while test ! -f /etc/network/interfaces
do
echo "
#/etc/network/interfaces -- generated by m23-Setup\

#The loopback interface\

auto lo\

iface lo inet loopback\

" > /etc/network/interfaces

for ethnr in `seq 0 0`
do
echo "
auto eth$ethnr\

iface eth$ethnr inet static\

    address $ip\

    netmask $submask\

    network $network\

    broadcast $broadcast\

    gateway $gateway" >> /etc/network/interfaces
done


done

	#/etc/hostname
	rm /etc/hostname 2> /dev/null

while test ! -f /etc/hostname
do
	hostname "$host"
	echo "$host" > /etc/hostname
done

	grep -v '192\.168\.1' /etc/hosts > /tmp/hosts
	cat /tmp/hosts > /etc/hosts

	#/etc/hosts
	echo "$ip	$host" >> /etc/hosts

	#/etc/resolv.conf
	rm /etc/resolv.conf 2> /dev/null
while test ! -f /etc/resolv.conf
do
echo "resolv.conf erstellen"
	echo "nameserver $nameserver" > /etc/resolv.conf
done

# Set network setting temporarily
ifconfig eth0 $ip
route add -net default gw $gateway

/etc/init.d/networking start 2> /dev/null
/etc/init.d/networking restart 2> /dev/null
ifconfig lo up
}





#configure the MySQL server configuration file my.cnf
configureMySQLmycnf()
{
	chmod 777 /tmp

	echo "$I18N_ConfiguringMySQL: /etc/mysql/my.cnf"

	#rerun mysql-server configure if the needed database structures are not present
	if test ! -d /var/lib/mysql
	then
		export DEBIAN_FRONTEND=noninteractive
		dpkg-reconfigure mysql-server
		dpkg-reconfigure mysql-server-5.0
	fi

	if test `grep -c 26214400 /etc/mysql/my.cnf` -eq 0
	then
		#insert "skip-networking" in the section "[mysqld]"
		#change "query_cache_size" from 16777216 to 26214400
		awk '{print($0);}
		/\[mysqld\]/ {print("skip-networking\nlog		= /var/log/mysql/mysql.log\nskip-innodb");}' /etc/mysql/my.cnf | sed 's/16777216/26214400/g' > /tmp/my.cnf
		mv /tmp/my.cnf /etc/mysql/my.cnf
		chown root.root /etc/mysql/my.cnf
		chmod 644 /etc/mysql/my.cnf
	fi

	sed -i 's/skip-innodb/#skip-innodb/g' /etc/mysql/my.cnf

	#starting the server
	/etc/init.d/mysql start

	#Get username and password for the MySQL database
	#dbadmin=`grep "^user" /etc/mysql/debian.cnf | tr -d '[:blank:]' | cut -d'=' -f2 | head -1`
	#dbadmpass=`grep "^password" /etc/mysql/debian.cnf | tr -d '[:blank:]' | cut -d'=' -f2 | head -1`

	#Delete all contents of the tables in the m23 database
	#-u$dbadmin -p$dbadmpass
	
	mysqlshow -uroot m23 | grep -v Tables | grep -v "Database:" | cut -d' ' -f2 | grep -v "+--" | while read table
	do
		mysql -uroot m23 -e "TRUNCATE $table;"
	done

# echo "DEBUG"
# mysqlshow -uroot m23
# exit
}



#extracts and copies base files like m23.tb2
extractBaseFiles()
{
	curDir=`pwd`

	#cp $curDir/m23MySQL-Init.sh $curDir/m23captured.sql.bz2 $curDir/m23.sql.bz2 .

	#must be created and chowned "by hand" (it's not possible by the filter list)
	mkdir -p /m23/var/cache/m23apt
	chown www-data.www-data /m23/var -R
	if test $? -ne 0
	then
		chown nobody.nogroup /m23/var -R
	fi
};



#extracts a tar.bz2 archive
extractFile()
{
	#check if there is an extra parameter for the title
	if [ -n "$2" ]
	then
		title="$2"
	else
		title="$I18N_Extracting $1..."
	fi

	clear
	echo "$title"
	7zr x -so $1 2> /dev/null | tar xp --same-owner&
	size=`find "$1" -printf "%s"`
	sleep 2

	search="$1"
	cmd="7zr"

	#get the PID of the extraction programm
	pid=`ps | grep "$cmd" | tr -s '[:blank:]' | sed 's/^ *//g' | cut -d' ' -f1 | head -1`
	#get the number of the opened input file
	fdinfo=`find /proc/$pid/fd -printf "%f*%l\n" 2> /dev/null | grep "$search" | cut -d'*' -f1`
	
	(
	while [ `ps | grep "$cmd" | wc -l` -gt 0 ]
	do
		#Check if the info file exists
		if [ -e /proc/$pid/fdinfo/$fdinfo ]
		then
			#Calculate the percentage
			pos=`cat /proc/$pid/fdinfo/$fdinfo 2> /dev/null | grep pos | tr -d '[:blank:]' | cut -d':' -f2 2>/dev/null`
			PCT=`echo $pos | awk -vsize=$size '{print(($0 / size) * 100)}'`
		else
			#If there is no info, just set a value
			break
		fi
	
echo "XXX"
echo $PCT  | cut -d'.' -f1
echo "$I18N_Extracting $1"
echo "XXX"
	sleep 1
	done
	) | dialog --backtitle "$I18N_windowheader" --title "$title" --gauge "$title" 6 70 0

	sleep 2

	echo -n | dialog --backtitle "$I18N_windowheader" --title "$title" --gauge "$title" 6 70 100

	if test $? -gt 0
	then
		echo "$I18N_Errorextracting $1"
		exit 1
	else
		#run the script to create missing directories
		if test -f /mkMissingDirectories.sh
		then
			sh /mkMissingDirectories.sh
			rm /mkMissingDirectories.sh
		else
			cat mkMissingDirectories.sh >> mkAllMissingDirectories.sh
		fi
	fi
};



#scans for IDE and SCSI drives
#returns: $installdrive: the found drive that can be used for installation e.g. hda (without "/dev/")
#returns: $installtype: type of the found drive (i = IDE, s = SCSI, n = none found)
#returns: $hdsize: size of the found drive in MB
getDrives()
{
	modprobe dm_mod

	if test -e /tmp/scsirun
	then
 		true
	else
 		touch /tmp/scsirun
		
		MODULES="aic7xxx aic79xx aic7xxx_old BusLogic ncr53c8xx NCR53c406a initio advansys aha1740 aha1542 aha152x atp870u dtc eata fdomain gdth megaraid pas16 pci2220i pci2000 psi240i qlogicfas qlogicfc qlogicisp seagate t128 tmscsim u14-34f ultrastor wd7000 a100u2w 3w-xxxx ahci"

		#add the SATA modules
		MODULES="$MODULES "`find /lib/modules/ -type f -printf "%f\n" | grep sata | cut -d'.' -f1 | awk -vORS=' ' '{print}'`

		#calculate tha amount of all modules
		MODULES_amount=`echo "$MODULES" | wc -w`

		#calculate percents per module
		add=`echo l | awk -vMA=$MODULES_amount '{print(100 / MA)}'`

		# Try to load the given modules (full path or current directory)
PCT=0
(
for i in $MODULES
do
PCT=`echo $add | awk -vaddx=$add -vcur=$PCT '{print($0 + cur)}'`
echo "XXX"
echo $PCT  | cut -d'.' -f1
echo "$I18N_probing: $i"
echo "XXX"
modprobe $i &> /dev/null
done
) | dialog --backtitle "$I18N_windowheader" --title "$I18N_probingModules" --gauge "$I18N_probingModules" 6 70 0

	fi

	installtype="n"
	
	#try to fetch the IDE drive for installation
	for dev in `ls /proc/ide/ | grep hd`
	do
		if test `cat /proc/ide/$dev/media` = "disk"
		then
			export installdrive=$dev
			export installtype="i"

			checkdisklabel /dev/$dev
	
			hdparm -c1 /dev/$dev
			#hdparm -d1 /dev/$dev
			break
		fi
	done
	
	#try to fetch the SCSI drive for installation
	if test $installtype = "n"
	then
		dialog --backtitle "$I18N_windowheader" --title "$I18N_windowheader" --infobox "$I18N_searchforscsi" 5 70
		
		dev=`dmesg | grep -i "scsi disk" | awk '{
			
			c=split($0,out,"[[]|[]]");
			
			if (c > 0)
				{
					print(out[2]);
					quit;
				}
			else
				{
					print($NF);
					quit;
				}
			}' | head -1`

		export installdrive=$dev

		checkdisklabel /dev/$dev

		export installtype="s"
		break
	fi

	#	export hdsize=`parted -s /dev/$installdrive print 2> /dev/null | grep Disk | cut -d' ' -f3 | tr -d '[:blank:]' | sed 's/GB/000/g' | sed 's/MB//g' | sed 's/[.,].[0-9 a-zA-Z]*//g'`

	hdsizeInKBytes=`sfdisk -s | grep "dev/$installdrive" | tr -d '[:blank:]' | cut -d':' -f2`
	export hdsize=`expr $hdsizeInKBytes / 1024`

	#export hdsize=`parted -s /dev/$installdrive print 2> /dev/null | grep geometry | cut -d'-' -f2 | tr -d '[:blank:]' | sed 's/GB/000/g' | sed 's/MB//g' | sed 's/[.,].[0-9 a-zA-Z]*//g'`

	if test $installtype = "n"
	then
		dialog --backtitle "$I18N_windowheader" --title "$I18N_windowheader" --infobox "$I18N_noInstallationDeviceFound" 5 70
		exit
	fi
}



#Shows a dialog for entering values o showing messages
#parameter: $1 backtitle
#parameter: $2 title
#parameter: $3 type (inputbox, passwordbox, msgbox)
#parameter: $4 height
#parameter: $5 width	
#parameter: $6 text
#parameter: $7 set to "disable" examination if the dialog return code
#parameter: $8 string to initalise an input dialog
#returns: File /tmp/dialog.value: with the entered value
#returns: Return code of the dialog
showDialog()
{
	echo "dialog --backtitle `echo \"'$1'\"` --title `echo \"'$2'\"` --clear --$3 `echo \"'$6'\"` $4 $5 "$8" 2> /tmp/dialog.value; exit \$?" > /tmp/dialog.cmd

	sh /tmp/dialog.cmd

	ret=$?

	#analyse the return code only if $7 isn't set
	if test "$7" = "disable"
	then
		case $ret in
			1 | 255)
				dialog --backtitle "$I18N_windowheader" --title "$I18N_windowheader" --clear --msgbox "$I18N_cancelinstallation" 12 41
				exit;;
		esac
	fi

	return $ret
}



#Shows a dialog for entering the root password two times and makes sure both are equal
#returns: rootpw: Entered password
showRootPwDialog()
{
	while `true`
	do
		# enter root password
		showDialog "$I18N_windowheader" "$I18N_rootpwheader" passwordbox 13 51 "$I18N_rootpwtext"
		rootpw=`cat /tmp/dialog.value`
		
		# enter it a second tome
		showDialog "$I18N_windowheader" "$I18N_rootpwheader" passwordbox 8 51 "$I18N_rootpwbtext"
		rootpwb=`cat /tmp/dialog.value`
	
		#check if the two passwords are identically
		if test $rootpw != $rootpwb
		then
			showDialog "$I18N_windowheader" "$I18N_pwdismatchheader" msgbox 7 60 "$I18N_pwdismatchtext"
		else
			break
		fi
	done
}



#dialog for entering network settings for the server
#returns: $host: hostname
#returns: $ip: IP address
#returns: $network: network address
#returns: $broadcast: bradcast address
#returns: $submask: subnet mask
#returns: $gateway: IP of the gateway server
#returns: $nameserver: IP of the DNS server
showNetworkDialog()
{
	# enter hostname
	showDialog "$I18N_windowheader" "$I18N_hostnameheader" inputbox 11 51 "$I18N_hostnametext"
	host=`cat /tmp/dialog.value`

	# enter IP
	showDialog "$I18N_windowheader" "$I18N_ipheader" inputbox 10 51 "$I18N_iptext"
	ip=`cat /tmp/dialog.value`

	# enter subnetmask
	showDialog "$I18N_windowheader" "$I18N_netmaskheader" inputbox 10 51 "$I18N_netmasktext" notDisabled `ipcalc -m $ip | cut -d'=' -f2`
	submask=`cat /tmp/dialog.value`

	# enter network
	showDialog "$I18N_windowheader" "$I18N_networkheader" inputbox 10 51 "$I18N_networktext" notDisabled `ipcalc -n $ip $submask | cut -d'=' -f2`
	network=`cat /tmp/dialog.value`

	# enter broadcast
	showDialog "$I18N_windowheader" "$I18N_broadcastheader" inputbox 10 51 "$I18N_broadcasttext" notDisabled `ipcalc -b $ip $submask | cut -d'=' -f2`
	broadcast=`cat /tmp/dialog.value`

	# enter gateway
	showDialog "$I18N_windowheader" "$I18N_gatewayheader" inputbox 10 51 "$I18N_gatewaytext"
	gateway=`cat /tmp/dialog.value`

	# enter nameserver
	showDialog "$I18N_windowheader" "$I18N_nameserverheader" inputbox 10 51 "$I18N_nameservertext" notDisabled "85.88.19.10"
	nameserver=`cat /tmp/dialog.value`

	#reload language file to fill in changed variables
	. $langFile
	# check entered values
	showDialog "$I18N_windowheader" "$I18N_valuescorrectheader" yesno 18 61 "$I18N_checkrootiphosttext" disable
	case $? in
		1 | 255)	#no selected or ESC pressed
			startBaseInstallation
			exit;;
	esac
}



#dialog for choosing the partition method
#returns: $setupType: type of the pertitioning (m23setup or expert)
showPartitioningDialog()
{
	# select partitioning method
	dialog --backtitle "$I18N_windowheader" --default-item "m23setup" --clear --title "$I18N_partformatheader" --menu "$I18N_partformattext" 22 75 2 \
		"m23setup"  "$I18N_standardinstall" \
		"expert" "$I18N_expertinstall" 2> /tmp/dialog.value

	retval=$?
	case $retval in
		1 | 255) 
			showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 12 41 "$I18N_cancelinstallation"
			exit;;
	esac

	setupType=`cat /tmp/dialog.value`
}





#dialog for choosing the partition method
#returns: $swapdev
#returns: $rootdev
normalPartition()
{
	showDialog "$I18N_windowheader" "$I18N_warningword" yesno 15 70 "$I18N_formatwarningtext"

	#calculate partition size and position
	rootsize=`expr $hdsize \- 514`
	swapbegin=`expr $rootsize + 1`

	#reload language file to fill in changed variables
	. $langFile

	showDialog "$I18N_windowheader" "$I18N_formatinghdtext" infobox 12 70 "$I18N_deletingpartitionstext"

	#give the installation drive a disk label
	checkdisklabel /dev/$installdrive

	#try to delete partitions 1 to 25 on the installation drive
	for devNr in `seq 1 25`
	do
		parted -s /dev/$installdrive rm $devNr 2> /dev/null > /dev/null
	done

	#create the installation partition
	showDialog "$I18N_windowheader" "$I18N_formatinghdtext" infobox 12 70 "$I18N_creatingbootpartition"
	parted -s /dev/$installdrive mkpart primary 2 $rootsize > /dev/null
	modprobe ext4
	mkfs.ext4 -F /dev/$installdrive"1" > /dev/null

	#create the swap partition
	showDialog "$I18N_windowheader" "$I18N_formatinghdtext" infobox 12 70 "$I18N_creatingswappartition"
	parted -s /dev/$installdrive mkpart primary linux-swap $swapbegin $hdsize > /dev/null
	mkswap /dev/$installdrive"2" > /dev/null

	showDialog "$I18N_windowheader" "$I18N_formatinghdtext" infobox 12 70 "$I18N_normalformatfinishedtext"

	swapdev=$installdrive"2"
	rootdev=$installdrive"1"
}



expertPartition()
{
	showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 14 70 "$I18N_expertinstalltext"

	#enter the name of the installation partition (e.g. hda1)
	showDialog "$I18N_windowheader" "$I18N_rootpartitionheader" inputbox 10 60 "$I18N_rootpartitiontext"
	rootpart=`cat /tmp/dialog.value`

	#enter the name of the swap partition (e.g. hda1)
	showDialog "$I18N_windowheader" "$I18N_swappartitionheader" inputbox 10 51 "$I18N_swappartitiontext"
	swappart=`cat /tmp/dialog.value`

	#reload language file to fill in changed variables
	. $langFile
	#check if the entered values are correct. otherwise start over
	showDialog "$I18N_windowheader" "$I18N_valuescorrectheader" yesno 18 61 "$I18N_checkrootswaptext" disable
	case $? in
		1)		#no selected
			expertPartition
			exit;;
		255)	#ESC pressed
			startBaseInstallation
			exit;;
	esac

	showDialog "$I18N_windowheader" "$I18N_windowheader" infobox 14 70 "$I18N_formatrootext3"
	mkfs.ext3 /dev/$rootpart > /dev/null

	showDialog "$I18N_windowheader" "$I18N_windowheader" infobox 14 70 "$I18N_formatswap"
	mkswap /dev/$swappart > /dev/null

	#reload language file to fill in changed variables
	. $langFile
	showDialog "$I18N_windowheader" "$I18N_formatfinishedheader" msgbox 18 45 "$I18N_expertformatfinishedtext"

	swapdev=$swappart
	rootdev=$rootpart
}

checkMD5s()
{
	#check the MD5 sums of the TARs
	cat md5s | while read line
	do
	md5=`echo $line | cut -d' ' -f1`
	file=`echo $line | cut -d' ' -f2`
	
	newmd5=`md5sum $file | cut -d' ' -f1`
	
	if test $newmd5 = $md5
	then
		echo "$file ok"
	else
		echo "$file ERROR"
		exit 123
	fi
	done
}





#Mounts the m23 server installation CD to /mnt/cdrom
mountInstMedium()
{
	if test $nfsdir
	then
		mount -t nfs $nfsdir /mnt/cdrom
	else

		mknod -m 660 /dev/hda b 3 0 2> /dev/null
		mknod -m 660 /dev/hdb b 3 64 2> /dev/null
		mknod -m 660 /dev/hdc b 22 0 2> /dev/null
		mknod -m 660 /dev/hdd b 22 64 2> /dev/null

		mkdir -p /mnt/cdrom

		for dev in `ls /dev/cdrom* /dev/hd[a-z]* /dev/hd[a-z][0-9]* /dev/scd[0-9]* /dev/sr[0-9]* /dev/sd[a-z] /dev/sd[a-z][0-9]* 2> /dev/null`
		do
			# WARNING: Don't remove "-t iso9660", because it is needed to mount the ISO correctly
			mount -t iso9660 $dev /mnt/cdrom 2> /dev/null

			# If mounting as ISO doesn't work, try to mount with auto detection of the file system
			if [ $? -ne 0 ]
			then
				mount $dev /mnt/cdrom 2> /dev/null
			fi

			# If it still cannot be mounted => skip this device/partition
			if [ $? -ne 0 ]
			then
				continue
			fi

			#if test -f /mnt/cdrom/m23image.tb2
			if test -f /mnt/cdrom/m23image.tar.7z
			then
				instCdrom=$dev
				# activate DMA and 32Bit access
				hdparm -d1 $dev 2> /dev/null
				hdparm -c1 $dev 2> /dev/null
				break
			else
				umount /mnt/cdrom 2> /dev/null
			fi
		done
		
		if [ $(mount | grep /mnt/cdrom -c) -eq 0 ]
		then
			echo 'ERROR: No installation medium mounted!'
			wait4go
			exit 1
		fi
	fi
}

extractFromCD()
{
	# mount
	swapon /dev/$swapdev
	mkdir -p /mnt/m23root/tmp/oldsys
	mount /dev/$rootdev /mnt/m23root

	if [ $? -ne 0 ]
	then
		showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 12 41 "$I18N_noHDFound"
		exit 1
	fi

	mkdir -p /mnt/m23root/tmp
	installPath="/mnt/m23root"
	
	mountInstMedium

#	cd /mnt/cdrom
#	checkMD5s

	showDialog "$I18N_windowheader" "$I18N_windowheader" infobox 5 70 "$I18N_extractingservertext"
	cd $installPath
	rm mkAllMissingDirectories.sh 2> /dev/null
	extractFile /mnt/cdrom/m23image.tar.7z "$I18N_extractingservertext"

	cd /mnt/cdrom
	extractBaseFiles
}




#chroot into the new system
chrootSystem()
{
	cd /mnt/m23root

	#chrooten
	echo $I18N_changingsystemtext
	mkdir -p /mnt/m23root/proc
	mount -o bind /proc /mnt/m23root/proc

	#copy files from the ramdisk to the HD
	cp /bin/m23hwscanner /mnt/m23root/bin
	cp /bin/genpw* /mnt/m23root/bin
	cp /bin/wait4go* /mnt/m23root/bin

	#Make sure all device nodes are included (needed for mounting the CD after chrooting)
	cp -a /dev/* /mnt/m23root/dev/



	modprobe dm-mod

	mkdir -p /mnt/m23root/tmp/oldsys
	cd /mnt/m23root

	pivot_root . tmp/oldsys

	export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin

# 	dpkg-divert --local --rename --add /bin/getty
# 	ln -s /bin/true /bin/getty

#	killall -9 init

	# Workaround for missing modules.dep to disable the repeated showing of the "FATAL" error.
	[ -d "/lib/modules/$(uname -r)" ] || mkdir -p "/lib/modules/$(uname -r)"
	[ -f "/lib/modules/$(uname -r)/modules.dep" ] || echo 'neverusefakemodule.ko:' > "/lib/modules/$(uname -r)/modules.dep"

	#cat /lib/modules/*/modules.dep > "/lib/modules/$(uname -r)/modules.dep"

	chmod 777 /tmp

	mount /proc
	mount /sys

	sh mkAllMissingDirectories.sh 2> /dev/null

	m23hwscanner /dev/$installdrive /dev/$rootdev
	checkFstabAndMount

	export LANG="C"
	export LC_ALL="C"

	mkdir -p /var/log/news /var/run/screen/S-root /var/log/mysql
	chmod 777 -R /var
	chmod 755 -R /var/run/sshd
	chmod 775 /var/run/screen
	chmod 700 /var/run/screen/S-root

	rm -r /home/m23-vbox/.VirtualBox
	rm -r /home/m23-vbox/.vnc
	rm /home/m23-vbox/.vnc/passwd
}






#write the root password to the shadow file
setRootPwd()
{
	newpw=`/bin/genpw -p $rootpw root`
	echo "root:$newpw:12106:0:99999:7:::" > /tmp/shadow.new
	grep -v root /etc/shadow >> /tmp/shadow.new
	cat /tmp/shadow.new > /etc/shadow
	chgrp shadow /etc/shadow
	chmod 640 /etc/shadow
}





# Check for and add extX module, if missing in /etc/initramfs-tools/modules
addExtModulesToInitramfsConf()
{
	for i in `seq 2 4`
	do
		ext="ext$i"

		if [ $(grep -c $ext /etc/initramfs-tools/modules) -eq 0 ]
		then
			echo $ext >> /etc/initramfs-tools/modules
		fi
	done
}





#Creates the initrds for all installed kernel
createInitrd()
{
	for kernelName in `ls /lib/modules/ | grep -v m23`
	do
		rm "/boot/initrd.img-$kernelName" 2> /dev/null
		touch "/boot/initrd.img-$kernelName"
	done

	for kimgpkg in `dpkg --get-selections | grep linux-image | grep -v deinstall$ | tr -d '[:blank:]' | sed 's/install$//g'`
	do
# 		kernelName=$(echo $kimgpkg | sed 's/^linux-image-//')
# 		rm "/boot/initrd.img-$kernelName" 2> /dev/null
# 		touch "/boot/initrd.img-$kernelName"
		dpkg-reconfigure $kimgpkg
	done

	apt-get install -f -y --force-yes
}





#install the grub boot manager
installGrub()
{
	dialog --backtitle "$I18N_windowheader" --default-item "y" --clear --title "$I18N_installgrubheader" --menu "$I18N_installgrubtext" 14 65 2 \
		"y"  "$I18N_installlilostandard" \
		"n" "$I18N_installliloexpert" 2> /tmp/dialog.value

	retval=$?
	case $retval in
		1 | 255)
		showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 12 41 "$I18N_cancelinstallation"
		exit;;
	esac

	if test `cat /tmp/dialog.value` = "y"
	then
		# Remove resume file that may contain the UUID of the swap partition for suspend/hibernation
		rm /etc/initramfs-tools/conf.d/resume 2> /dev/null

		checkFstabAndMount

		bootDevice="/dev/$installdrive"
		rootDevice="/dev/$rootdev"

		createInitrd

		if /usr/sbin/grub-install $bootDevice
		then
			echo "grub ok"
		else
			grub-install --recheck --force $bootDevice
		fi

		/usr/sbin/update-grub2
		sync

# 		update-grub -y 2> /dev/null
# 		if [ $? -ne 0 ]
# 		then
# 			/usr/sbin/update-grub
# 		fi
	fi

	showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 14 45 "$I18N_installationfinishedtext"

	eject /mnt/cdrom

	/sbin/reboot -f 2> /dev/null
	reboot -f 2> /dev/null
	reboot 2> /dev/null
}





#install the LiLo boot manager
installLilo()
{
	dialog --backtitle "$I18N_windowheader" --default-item "y" --clear --title "$I18N_installliloheader" --menu "$I18N_installlilotext" 14 65 2 \
		"y"  "$I18N_installlilostandard" \
		"n" "$I18N_installliloexpert" 2> /tmp/dialog.value

	retval=$?
	case $retval in
		1 | 255)
		showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 12 41 "$I18N_cancelinstallation"
		exit;;
	esac

	if test `cat /tmp/dialog.value` = "y"
	then
		showDialog "$I18N_windowheader" "$I18N_windowheader" infobox 5 70 "$I18N_installlilo"
		lsmod | cut -d' ' -f1 | grep -v Module > /etc/modules

		apt-get -y --force-yes remove grub 2>&1 > /dev/null

		createInitrd

		m23hwscanner /dev/$installdrive /dev/$rootdev

		#check if there is an old kernel that should be included
		if [ -e /vmlinuz.old ]
		then
			echo "
image=/vmlinuz.old
label=m23angelOne.old
read-only
root=/dev/$rootdev" >> /etc/lilo.conf

			if [ -e /initrd.img.old ]
			then
				echo "initrd=/initrd.img.old" >> /etc/lilo.conf
			fi
		fi

		mount /proc

		#Add large-memory option to lilo.conf if it's missing
		if [ `grep -c large-memory /etc/lilo.conf` -eq 0 ]
		then
			echo "large-memory" > /tmp/lilo.conf
			cat /etc/lilo.conf >> /tmp/lilo.conf
			cat /tmp/lilo.conf > /etc/lilo.conf
		fi

		/sbin/lilo 2> /dev/null
		ret=$?

		if [ $ret -ne 0 ]
		then
			cd /dev
			rm -r .udev* udev* 2> /dev/null
			./MAKEDEV generic
			/sbin/lilo

			#find all "update-grub" files
			for updategrub in `whereis update-grub | sed 's/ /\n/g' | grep -v ':'` /usr/bin/update-grub
			do
				#Delete the original update-grub
				rm "$updategrub" 2> /dev/null
				#Write a script that calls lilo
				echo "#!/bin/sh
lilo" > "$updategrub"
				#Make it executable
				chmod +x "$updategrub"
			done
		fi
	fi

	showDialog "$I18N_windowheader" "$I18N_windowheader" msgbox 14 45 "$I18N_installationfinishedtext"

	/sbin/reboot -f 2> /dev/null
	reboot -f 2> /dev/null
	reboot 2> /dev/null
}





installDebs()
{
	mkdir -p /mnt/cdrom
	mountInstMedium
	#Remove m23debs (test sources)
	grep -v "http://m23debs" /etc/apt/sources.list > /tmp/sources.list
	cat /tmp/sources.list > /etc/apt/sources.list

	#Remove old SF web repository
	grep -v "m23.sourceforge.net/m23inst" /etc/apt/sources.list > /tmp/sources.list

	echo "deb file:/mnt/cdrom/pool ./" > /etc/apt/sources.list

	rm /m23/data+scripts/packages/baseSys/authorized_keys

	apt-get -y --force-yes update
	export DEBIAN_FRONTEND=noninteractive
# echo "DEBUG"
	apt-get -y --force-yes install m23
# read lala

	#Make sure GPG will be configured and there are no keys stored
	rm /home/grdmgpg/.gnupg/*

# echo "DEBUG"
	dpkg-reconfigure m23
# read lala

	
	apt-get -y --force-yes install m23-vbox
	dpkg-reconfigure m23-vbox


	#Add the URL for server update if missing
	if [ `grep "http://m23inst.goos-habermann.de" /tmp/sources.list | grep ^deb -c` -eq 0 ]
	then
		echo "deb http://m23inst.goos-habermann.de ./" >> /tmp/sources.list
	fi

	mv /tmp/sources.list /etc/apt
	umount /mnt/cdrom
}



fixSourcesList()
{
	# Remove any additional lists
	rm /etc/apt/sources.list.d/*.list 2> /dev/null

	#Remove m23debs (test sources)
	grep -v "http://m23debs" /etc/apt/sources.list > /tmp/sources.list
	cat /tmp/sources.list > /etc/apt/sources.list

	#Remove old SF web repository
	grep -v "m23.sourceforge.net/m23inst" /etc/apt/sources.list > /tmp/sources.list

	#Add the URL for server update if missing
	if [ `grep "http://m23inst.goos-habermann.de" /tmp/sources.list | grep ^deb -c` -eq 0 ]
	then
		echo "deb http://m23inst.goos-habermann.de ./" >> /tmp/sources.list
	fi
	cat /tmp/sources.list > /etc/apt/sources.list
}


copyDebs()
{
	fixSourcesList

	mkdir -p /mnt/cdrom
	mountInstMedium

	mkdir -p /m23debs
	cp -v /mnt/cdrom/pool/* /m23debs
	cp -v /mnt/cdrom/afterRebootSetup.sh /usr/sbin
	chmod +x /usr/sbin/afterRebootSetup.sh
	
	echo "deb file:/m23debs ./" >> /etc/apt/sources.list.d/localm23debs.list

	rm /m23/data+scripts/packages/baseSys/authorized_keys

	#Make sure GPG will be configured and there are no keys stored
	rm /home/grdmgpg/.gnupg/*

	umount /mnt/cdrom
}





extractPools()
{
	pwd=`pwd`
	mkdir -p /m23/data+scripts/pool
	cd /

	for poolarchive in `ls /tmp/oldsys/mnt/cdrom/poolarchives/*.tar.bz2`
	do
		echo -n "Extracting pool $poolarchive ..."
		tar xfj $poolarchive
		echo " done"
	done
	cd $pwd
}





correctPoolIPs()
{
	pwd=`pwd`
	cd /m23/data+scripts/pool
	for poolarchive in `ls`
	do
		sl="$poolarchive/sourceslist.m23pool"
		if [ -f $sl ]
		then
			echo "Adjusting sourceslist $sl..."
			sed "s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/$ip/g" $sl > /tmp/sl
			cat /tmp/sl > $sl
		fi
	done
	cd $pwd
}





#Updates an online update if the user chooses it
updateSystem()
{
	showDialog "$I18N_windowheader" "$I18N_updateheader" yesno 5 61 "$I18N_updatetext" notDisabled
	if [ $? -eq 0 ]
	then
		#Deactivate init
		mv /sbin/init /sbin/init.deactivated
		#Make sure, ischroot will return 2 to stop sysvinit from shuting down the installation
		mv /usr/bin/ischroot /usr/bin/ischroot.deactivated

		echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/90localsettings
		dpkg --clear-avail
		sync-available 2> /dev/null
		echo 3 > /proc/sys/vm/drop_caches

		apt-get -y --force-yes update		
		export DEBIAN_FRONTEND=noninteractive
		apt-get -y --force-yes upgrade

		createInitrd

		#Reactivate init
		mv /sbin/init.deactivated /sbin/init
		mv /usr/bin/ischroot.deactivated /usr/bin/ischroot
	fi
}





# Change MySQL init to a version working with the boot CD
setISOInitMySQL()
{
	if [ ! -f /etc/init.d/mysql.m23 ]
	then
		# Start MySQL/MariaDB
		/usr/bin/mysqld_safe --log-error=/tmp/my.log --skip-syslog --socket=/var/run/mysqld/mysqld.sock&
		sleep 5

		# Move the initscript out of the way
		mv /etc/init.d/mysql /etc/init.d/mysql.m23

		# Create a fake initscript that does nothing
		touch /etc/init.d/mysql
		chmod +x /etc/init.d/mysql

# 		cat >> /etc/init.d/mysql.raus << "EOF"
# #!/bin/bash
# case "${1:-''}" in
# 	'start')
# 		/usr/bin/mysqld_safe --log-error=/tmp/my.log --skip-syslog --socket=/var/run/mysqld/mysqld.sock&
# 		sleep 3
# 	;;
# 	'stop')
# 		killall -9 mysqld_safe
# 		killall -9 mysqld
# 		killall -9 mysql
# 		sleep 3
# 	;;
# 	'restart')
# 		killall -9 mysqld_safe
# 		killall -9 mysqld
# 		killall -9 mysql
# 		sleep 3
# 		/usr/bin/mysqld_safe --log-error=/tmp/my.log --skip-syslog --socket=/var/run/mysqld/mysqld.sock&
# 		sleep 3
# 	;;
# esac
# EOF
	fi

	# Make logger happy that expects existence /dev/log (systemd)
	ln -s /dev/log /dev/stderr
}





# Change MySQL init to a version working with systemd
setSystemdInitMySQL()
{
	# Switch back to original initscript
	mv /etc/init.d/mysql.m23 /etc/init.d/mysql
	# Remove fake logging device (systemd)
	rm /dev/log
}





#start the installation of the base system with all tools
startBaseInstallation()
{
	. $langFile
	mkdir -p /tmp

	showDialog "$I18N_windowheader" "$I18N_welcometom23installation" msgbox 21 70 "$I18N_welcomeinfo"

	/bin/setterm -blank 0

	addgroup www-data 2> /dev/null
	adduser www-data 2> /dev/null

	getDrives
	showRootPwDialog
	showNetworkDialog
	showPartitioningDialog

	if test $setupType = "m23setup"
	then
		normalPartition
	else
		expertPartition
	fi

	extractFromCD
	chrootSystem
	setISOInitMySQL
	configureNetwork
	configureMySQLmycnf
	setRootPwd

# Use existing LDAP database
#	ldappw=`pwgen -s 23 1`
#m23-ldap m23-ldap/LDAPpass string $ldappw
	echo "

m23-ldap m23-ldap/LDAPhint note
m23 m23/configDHCP boolean true
m23 m23/configMySQL boolean true
m23 m23/configureApache boolean true
m23 m23/configureBackupPC boolean true
m23 m23/configureSquid boolean true
m23 m23/configureSSH boolean true
m23 m23/configureSSL boolean true
m23 m23/configureSudo boolean true
m23 m23/experimentalWarn note
m23 m23/warnDHCP note
m23-tftp m23-tftp/configureTFTP boolean true
" > /tmp/debconf-setting

	debconf-set-selections /tmp/debconf-setting
	rm /tmp/debconf-setting

	#force the deb to create a new SSH key pair
	rm /root/.ssh/id_dsa* 2> /dev/null
	rm /root/.ssh/authorized_keys 2> /dev/null
	rm /m23/data+scripts/packages/baseSys/authorized_keys 2> /dev/null
	rm /root/.ssh/authorized_keys 2> /dev/null
	bpchome=`grep backuppc /etc/passwd | cut -d':' -f6`
	if [ $( grep -c "$badSSHKey" $bpchome/.ssh/id_rsa.pub ) -gt 0 ]
	then
		rm $bpchome/.ssh/id_*
	fi
	export DEBIAN_FRONTEND=noninteractive

#	installDebs			2019-04-17
	copyDebs

	extractPools
	correctPoolIPs

#	/m23/bin/fix-permissions			2019-04-17
	#create the needed spool dirs for Squid
#	squid -z			2019-04-17

# Use existing LDAP database

	#starting with an empty LDAP database
# 	rm -rf /var/lib/ldap
# 
# 	rm /tmp/debconf-setting 2> /dev/null
# 	echo "
# slapd slapd/internal/adminpw  password $ldappw
# slapd slapd/password1 password $ldappw
# slapd slapd/password2 password $ldappw
# m23-ldap m23-ldap/LDAPpass string $ldappw
# " > /tmp/debconf-setting
# 
# 	debconf-set-selections /tmp/debconf-setting
# 
# 
# 	dpkg-reconfigure slapd
# 	dpkg-reconfigure m23-ldap


	#dpkg-reconfigure m23

	#Updates locales
	echo 'de_DE ISO-8859-1
de_DE.UTF-8 UTF-8
de_DE@euro ISO-8859-15
en_US.ISO-8859-15 ISO-8859-15
en_US.UTF-8 UTF-8' > /etc/locale.gen
	locale-gen

	#Language specific debconf values
	if [ $lang = "de" ]
	then
echo 'keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout
keyboard-configuration keyboard-configuration/compose select No compose key
keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false
keyboard-configuration keyboard-configuration/layout select
keyboard-configuration keyboard-configuration/layoutcode string de
keyboard-configuration keyboard-configuration/model select Generische PC-Tastatur mit 105 Tasten (Intl)
keyboard-configuration keyboard-configuration/modelcode string pc105
keyboard-configuration keyboard-configuration/optionscode string
keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true
keyboard-configuration keyboard-configuration/switch select No temporary switch
keyboard-configuration keyboard-configuration/toggle select No toggling
keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true
keyboard-configuration keyboard-configuration/unsupported_config_options boolean true
keyboard-configuration keyboard-configuration/unsupported_layout boolean true
keyboard-configuration keyboard-configuration/unsupported_options boolean true
keyboard-configuration keyboard-configuration/variant select Deutschland - Akzenttasten deaktivieren
keyboard-configuration keyboard-configuration/variantcode string nodeadkeys
keyboard-configuration keyboard-configuration/xkb-keymap select de(nodeadkeys)' > /tmp/keyboard-configuration.debconf

	sed -i 's/XKBLAYOUT=.*/XKBLAYOUT="de"/g' /etc/default/console-setup
	sed -i 's/XKBLAYOUT=.*/XKBLAYOUT="de"/g' /etc/default/keyboard
	update-locale LANG=de_DE.UTF-8 LANGUAGE=de_DE.UTF-8 LC_ALL=de_DE.UTF-8

	else
echo 'keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout
keyboard-configuration keyboard-configuration/compose select No compose key
keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false
keyboard-configuration keyboard-configuration/layout select USA
keyboard-configuration keyboard-configuration/layoutcode string us
keyboard-configuration keyboard-configuration/model select Generische PC-Tastatur mit 105 Tasten (Intl)
keyboard-configuration keyboard-configuration/modelcode string pc105
keyboard-configuration keyboard-configuration/optionscode string
keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true
keyboard-configuration keyboard-configuration/switch select No temporary switch
keyboard-configuration keyboard-configuration/toggle select No toggling
keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true
keyboard-configuration keyboard-configuration/unsupported_config_options boolean true
keyboard-configuration keyboard-configuration/unsupported_layout boolean true
keyboard-configuration keyboard-configuration/unsupported_options boolean true
keyboard-configuration keyboard-configuration/variant select USA
keyboard-configuration keyboard-configuration/variantcode string' > /tmp/keyboard-configuration.debconf

	sed -i 's/XKBLAYOUT=.*/XKBLAYOUT="us"/g' /etc/default/console-setup
	sed -i 's/XKBLAYOUT=.*/XKBLAYOUT="us"/g' /etc/default/keyboard

	#Make sure that "nodeadkeys" is not there
	sed -i 's/XKBVARIANT=.*/XKBVARIANT=""/g' /etc/default/keyboard

	update-locale LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8
	fi

	debconf-set-selections /tmp/keyboard-configuration.debconf
	dpkg-reconfigure keyboard-configuration

	#force creating a new certificate
#	/m23/bin/mkCert.sh			2019-04-17

	#Remove possibly existing APT proxy
	grep -v "Acquire::http::Proxy" /etc/apt/apt.conf > /tmp/apt.conf
	cat /tmp/apt.conf > /etc/apt/apt.conf
	rm /tmp/apt.conf

	addExtModulesToInitramfsConf

#	updateSystem				2019-04-17

	umount /mnt/cdrom
#	setSystemdInitMySQL			2019-04-17
	installGrub
}