<?xml version="1.0"?>
<mateconf>
	<entry name="visual_bell_type" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Visual Bell Type">
			<default type="string">
				<stringvalue>fullscreen</stringvalue>
			</default>
			<longdesc>
          Tells Marco how to implement the visual indication that the
          system bell or another application &apos;bell&apos; indicator has been
          rung.  Currently there are two valid values, &quot;fullscreen&quot;, which
          causes a fullscreen white-black flash, and &quot;frame_flash&quot; which
          causes the titlebar of the application which sent the bell signal
          to flash.  If the application which sent the bell is unknown (as
          is usually the case for the default &quot;system beep&quot;), the currently
          focused window&apos;s titlebar is flashed.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="visual_bell" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Enable Visual Bell">
			<default type="bool" value="false"/>
			<longdesc>
          Turns on a visual indication when an application or the system
          issues a &apos;bell&apos; or &apos;beep&apos;; useful for the hard-of-hearing and for
          use in noisy environments.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="titlebar_uses_system_font" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Use standard system font in window titles">
			<default type="bool" value="false"/>
			<longdesc>
          If true, ignore the titlebar_font
          option, and use the standard application font for window
          titles.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="titlebar_font" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Window title font">
			<default type="string">
				<stringvalue>Sans Bold 10</stringvalue>
			</default>
			<longdesc>
          A font description string describing a font for window
          titlebars. The size from the description will only be used if the
          titlebar_font_size option is set to 0. Also, this option is
          disabled if the titlebar_uses_desktop_font option is set to true.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="theme" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Current theme">
			<default type="string">
				<stringvalue>Spidey-Left</stringvalue>
			</default>
			<longdesc>
          The theme determines the appearance of window borders,
          titlebar, and so forth.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="resize_with_right_button" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Whether to resize with the right button">
			<default type="bool" value="true"/>
			<longdesc>
           Set this to true to resize with the right button and show a menu
           with the middle button while holding down the key given in
           &quot;mouse_button_modifier&quot;; set it to false to make it work the
           opposite way around.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="reduced_resources" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="If true, trade off usability for less resource usage">
			<default type="bool" value="false"/>
			<longdesc>
           If true, marco will give the user less feedback by using
           wireframes, avoiding animations, or other means.  This is a
           significant reduction in usability for many users, but may allow
           legacy applications to continue working, and may also be a
           useful tradeoff for terminal servers.  However, the wireframe
           feature is disabled when accessibility is on.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="raise_on_click" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Whether raising should be a side-effect of other user                 interactions">
			<default type="bool" value="true"/>
			<longdesc>
           Setting this option to false can lead to buggy behavior, so
           users are strongly discouraged from changing it from the default
           of true.
           Many actions (e.g. clicking in the client area, moving or resizing the window)
           normally raise the window as a side-effect. Setting this option to false, which
           is strongly discouraged, will decouple raising from other user actions, and
           ignore raise requests generated by applications. See
           http://bugzilla.gnome.org/show_bug.cgi?id=445447#c6.
           Even when this option is false, windows can
           still be raised by an alt-left-click anywhere on the window, a
           normal click on the window decorations, or by special messages
           from pagers, such as activation requests from tasklist applets.
           This option is currently disabled in click-to-focus mode.
           Note that the list of ways to raise windows when raise_on_click
           is false does not include programmatic requests from
           applications to raise windows; such requests will be ignored
           regardless of the reason for the request.  If you are an
           application developer and have a user complaining that your
           application does not work with this setting disabled, tell them
           it is _their_ fault for breaking their window manager and that
           they need to change this option back to true or live with the
           &quot;bug&quot; they requested.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="num_workspaces" mtime="1367786905" type="schema" stype="int" owner="marco">
		<local_schema locale="C" short_desc="Number of workspaces">
			<default type="int" value="4"/>
			<longdesc>
          Number of workspaces. Must be more than zero, and has a fixed
          maximum to prevent making the desktop unusable by accidentally
          asking for too many workspaces.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="mouse_button_modifier" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Modifier to use for modified window click actions">
			<default type="string">
				<stringvalue>&lt;Alt&gt;</stringvalue>
			</default>
			<longdesc>
           Clicking a window while holding down this modifier key
           will move the window (left click), resize the window
           (middle click), or show the window menu (right click).
           The middle and right click operations may be swapped
           using the &quot;resize_with_right_button&quot; key.
           Modifier is expressed as &quot;&lt;Alt&gt;&quot; or &quot;&lt;Super&gt;&quot;
           for example.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="focus_new_windows" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Control how new windows get focus">
			<default type="string">
				<stringvalue>smart</stringvalue>
			</default>
			<longdesc>
          This option provides additional control over how newly created
          windows get focus.  It has two possible values; &quot;smart&quot; applies
          the user&apos;s normal focus mode, and &quot;strict&quot; results in windows
          started from a terminal not being given focus.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="focus_mode" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Window focus mode">
			<default type="string">
				<stringvalue>click</stringvalue>
			</default>
			<longdesc>
          The window focus mode indicates how windows are activated.
          It has three possible values; &quot;click&quot; means windows must
          be clicked in order to focus them, &quot;sloppy&quot; means windows
          are focused when the mouse enters the window, and &quot;mouse&quot; means
          windows are focused when the mouse enters the window and
          unfocused when the mouse leaves the window.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="disable_workarounds" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Disable misfeatures that are required by old or broken                applications">
			<default type="bool" value="false"/>
			<longdesc>
          Some applications disregard specifications in ways that result in
          window manager misfeatures. This option puts Marco in a
          rigorously correct mode, which gives a more consistent user
          interface, provided one does not need to run any misbehaving
          applications.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="compositing_manager" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Compositing Manager">
			<default type="bool" value="false"/>
			<longdesc>
          Determines whether Marco is a compositing manager.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="button_layout" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Arrangement of buttons on the titlebar">
			<default type="string">
				<stringvalue>menu:minimize,maximize,close</stringvalue>
			</default>
			<longdesc>
           Arrangement of buttons on the titlebar. The
           value should be a string, such as
           &quot;menu:minimize,maximize,spacer,close&quot;; the colon separates the
           left corner of the window from the right corner, and
           the button names are comma-separated. Duplicate buttons
           are not allowed. Unknown button names are silently ignored
           so that buttons can be added in future marco versions
           without breaking older versions.
           A special spacer tag can be used to insert some space between
           two adjacent buttons.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="auto_raise_delay" mtime="1367786905" type="schema" stype="int" owner="marco">
		<local_schema locale="C" short_desc="Delay in milliseconds for the auto raise option">
			<default type="int" value="500"/>
			<longdesc>
          The time delay before raising a window if auto_raise is set to
          true. The delay is given in thousandths of a second.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="auto_raise" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="Automatically raises the focused window">
			<default type="bool" value="false"/>
			<longdesc>
          If set to true, and the focus mode is either &quot;sloppy&quot; or &quot;mouse&quot;
          then the focused window will be automatically raised after a
          delay specified by the auto_raise_delay key. This is not related
          to clicking on a window to raise it, nor to entering a window
          during drag-and-drop.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="audible_bell" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="System Bell is Audible">
			<default type="bool" value="true"/>
			<longdesc>
          Determines whether applications or the system can generate
          audible &apos;beeps&apos;; may be used in conjunction with &apos;visual bell&apos; to
          allow silent &apos;beeps&apos;.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="application_based" mtime="1367786905" type="schema" stype="bool" owner="marco">
		<local_schema locale="C" short_desc="(Not implemented) Navigation works in terms of applications not windows">
			<default type="bool" value="false"/>
			<longdesc>
          If true, then Marco works in terms of applications rather than
          windows. The concept is a bit abstract, but in general an
          application-based setup is more like the Mac and less like
          Windows. When you focus a window in application-based mode, all
          the windows in the application will be raised. Also, in
          application-based mode, focus clicks are not passed through to
          windows in other applications. Application-based mode is,
          however, largely unimplemented at the moment.
        </longdesc>
		</local_schema>
	</entry>
	<entry name="action_right_click_titlebar" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Action on title bar right-click">
			<default type="string">
				<stringvalue>menu</stringvalue>
			</default>
			<longdesc>
           This option determines the effects of right-clicking on the
           title bar.  Current valid options are
	   &apos;toggle_shade&apos;, which will shade/unshade the window,
	   &apos;toggle_maximize&apos; which will maximize/unmaximize the window,
	   &apos;toggle_maximize_horizontally&apos; and &apos;toggle_maximize_vertically&apos;
	   which will maximize/unmaximize the window in that direction only,
	   &apos;minimize&apos; which will minimize the window,
	   &apos;shade&apos; which will roll the window up,
	   &apos;menu&apos; which will display the window menu,
	   &apos;lower&apos; which will put the window behind all the others,
	   and &apos;none&apos; which will not do anything.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="action_middle_click_titlebar" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Action on title bar middle-click">
			<default type="string">
				<stringvalue>lower</stringvalue>
			</default>
			<longdesc>
           This option determines the effects of middle-clicking on the
           title bar.  Current valid options are
	   &apos;toggle_shade&apos;, which will shade/unshade the window,
	   &apos;toggle_maximize&apos; which will maximize/unmaximize the window,
	   &apos;toggle_maximize_horizontally&apos; and &apos;toggle_maximize_vertically&apos;
	   which will maximize/unmaximize the window in that direction only,
	   &apos;minimize&apos; which will minimize the window,
	   &apos;shade&apos; which will roll the window up,
	   &apos;menu&apos; which will display the window menu,
	   &apos;lower&apos; which will put the window behind all the others,
	   and &apos;none&apos; which will not do anything.
         </longdesc>
		</local_schema>
	</entry>
	<entry name="action_double_click_titlebar" mtime="1367786905" type="schema" stype="string" owner="marco">
		<local_schema locale="C" short_desc="Action on title bar double-click">
			<default type="string">
				<stringvalue>toggle_maximize</stringvalue>
			</default>
			<longdesc>
           This option determines the effects of double-clicking on the
           title bar.  Current valid options are
	   &apos;toggle_shade&apos;, which will shade/unshade the window,
	   &apos;toggle_maximize&apos; which will maximize/unmaximize the window,
	   &apos;toggle_maximize_horizontally&apos; and &apos;toggle_maximize_vertically&apos;
	   which will maximize/unmaximize the window in that direction only,
	   &apos;minimize&apos; which will minimize the window,
	   &apos;shade&apos; which will roll the window up,
	   &apos;menu&apos; which will display the window menu,
	   &apos;lower&apos; which will put the window behind all the others,
	   and &apos;none&apos; which will not do anything.
         </longdesc>
		</local_schema>
	</entry>
</mateconf>
